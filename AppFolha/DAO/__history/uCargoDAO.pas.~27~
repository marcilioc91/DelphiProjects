unit uCargoDAO;

interface

uses
  System.SysUtils, System.Classes, System.Generics.Collections,

  FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.VCLUI.Wait,

  FireDAC.Comp.Client, FireDAC.DApt, FireDAC.Phys.FBDef, FireDAC.Phys.IBBase,
  FireDAC.Phys.FB,

  Data.DB,

  uConexao, uCargo;

type
  TCargoDAO = Class
    private
      FConexao: TConexao;
      FDQryCargo: TFDQuery;
    public
      constructor Create;
      destructor Destroy; override;

      procedure Incluir(descricao: String);
      function Buscar(codCargo: Integer): String;
      function ListarTodos: TObjectList<TCargo>;
      function ListarTodosQry(descricao: String): TFDQuery;
  end;

implementation

{ TCargoDAO }

constructor TCargoDAO.Create;
begin
  FConexao := TConexao.Create;

  FDQryCargo := TFDQuery.Create(nil);
  FDQryCargo.Connection := FConexao.GetConexao;
end;

function TCargoDAO.Buscar(codCargo: Integer): String;
begin
  Result := '';

  try
    FDQryCargo.Close;
    FDQryCargo.SQL.Clear;
    FDQryCargo.SQL.Add('SELECT nome');
    FDQryCargo.SQL.Add('  FROM cargo');
    FDQryCargo.SQL.Add(' WHERE codigo = :codCargoParam');
    FDQryCargo.ParamByName('codCargoParam').AsInteger := codCargo;
    FDQryCargo.Open;

    Result := FDQryCargo.FieldByName('nome').AsString;
  finally
    FDQryCargo.Close;
  end;
end;

function TCargoDAO.ListarTodos: TObjectList<TCargo>;
var
  cargo: TCargo;
begin
  Result := nil;

  try
    FDQryCargo.Close;
    FDQryCargo.SQL.Clear;
    FDQryCargo.SQL.Add('SELECT codigo, nome');
    FDQryCargo.SQL.Add('  FROM cargo');
    FDQryCargo.SQL.Add(' ORDER BY nome');
    FDQryCargo.Open;

    if (FDQryCargo.RecordCount > 0) then
    begin
      FDQryCargo.First;

      while not FDQryCargo.Eof do
      begin
        cargo := TCargo.Create;

        cargo.codigo := FDQryCargo.FieldByName('codigo').AsInteger;
        cargo.nome   := FDQryCargo.FieldByName('nome').AsString;

        Result.Add(cargo);

        cargo.DisposeOf;

        FDQryCargo.Next;
      end;
    end;
  finally
    if Assigned(cargo) then //se o objeto está instanciado na memória
      cargo.DisposeOf;

    FDQryCargo.Close;
  end;
end;

function TCargoDAO.ListarTodosQry(descricao: String): TFDQuery;
begin
  Result := nil;

  try
    FDQryCargo.Close;
    FDQryCargo.SQL.Clear;
    FDQryCargo.SQL.Add('SELECT codigo, nome');
    FDQryCargo.SQL.Add('  FROM cargo');
    if not (descricao.IsEmpty) then
    begin
      FDQryCargo.SQL.Add(' WHERE nome LIKE ' + QuotedStr('%'+descricao+'%'));
      FDQryCargo.SQL.Add('    OR codigo = ' + QuotedStr(descricao));
    end;
    FDQryCargo.SQL.Add(' ORDER BY codigo');
    FDQryCargo.Open;

    Result := FDQryCargo;
  finally
    FDQryCargo.Close;
  end;
end;

destructor TCargoDAO.Destroy;
begin
  inherited Destroy;
end;

procedure TCargoDAO.Incluir(descricao: String);
begin
  try
    FDQryCargo.Close;
    FDQryCargo.SQL.Clear;
    FDQryCargo.SQL.Add('INSERT INTO cargo (nome)');
    FDQryCargo.SQL.Add('  VALUES (:nome)');
    FDQryCargo.ParamByName('descricao').AsString := descricao;
    FDQryCargo.ExecSQL;
  except on E: Exception do
    raise ('Erro ao incluir o cargo. ' + E.Message);
  end;
end;

end.
