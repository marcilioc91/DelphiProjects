unit uINSSDAO;

interface

uses
  System.Classes, System.Generics.Collections, System.SysUtils,

  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.VCLUI.Wait, FireDAC.Comp.Client, FireDAC.DApt,
  FireDAC.Phys.FBDef, FireDAC.Phys.IBBase, FireDAC.Phys.FB,

  Data.DB,

  uConexao, uINSS;

type
  TINSSDAO = class
    private
      FConexao: TConexao;
      FDQryINSS: TFDQuery;
    public
      procedure Incluir(inss: TINSS);
      procedure Alterar(inss: TINSS);
      procedure Excluir(data: TDateTime);
      function Buscar(data: TDateTime): TINSS;
      function ListarTodosQry(data: String): TFDQuery;
      function Calc(Salario: Currency): Currency;
    end;

implementation

{ TINSS }

function TINSSDAO.Calc(Salario: Currency): Currency;
begin
  Result := 0;

  if Salario <= 0 then
    raise Exception.Create('Salário deve ser maior que zero.');

  if Salario <= 1100 then
    Result := Salario * 0.075
  else if Salario <= 2203.48 then
    Result := Salario * 0.09
  else if Salario <= 3305.22 then
    Result := Salario * 0.12
  else if Salario <= 6433.57 then
    Result := Salario * 0.14
  else
    Result := 6433.57 * 0.14;
end;

procedure TINSSDAO.Incluir(inss: TINSS);
begin
  try
    FDQryINSS.Close;
    FDQryINSS.SQL.Clear;
    FDQryINSS.SQL.Add('INSERT INTO inss (data, aliquota, minimo, maximo)');
    FDQryINSS.SQL.Add('  VALUES (:data, :aliquota, :minimo, :maximo)');
    FDQryINSS.ParamByName('data').AsDate         := inss.data;
    FDQryINSS.ParamByName('aliquota').AsCurrency := inss.aliquota;
    FDQryINSS.ParamByName('minimo').AsCurrency   := inss.minimo;
    FDQryINSS.ParamByName('maximo').AsCurrency   := inss.maximo;
    FDQryINSS.ExecSQL;
  except on E: Exception do
    raise exception ('Erro ao incluir o INSS. ' + E.Message);
  end;
end;

procedure TINSSDAO.Alterar(inss: TINSS);
begin
  //TODO: Fazer alteração do INSS
end;

function TINSSDAO.Buscar(data: TDateTime): TINSS;
begin
  Result := nil;

  try
    FDQryINSS.Close;
    FDQryINSS.SQL.Clear;
    FDQryINSS.SQL.Add('SELECT data');
    FDQryINSS.SQL.Add('  FROM inss ');
    FDQryINSS.SQL.Add(' WHERE data = :data');
    FDQryINSS.ParamByName('data').AsDate := data;
    FDQryINSS.Open;

    Result.data           := FDQryINSS.FieldByName('nome').AsDateTime;
    Result.aliquota := FDQryINSS.FieldByName('aliquota').AsCurrency;
    Result.minimo   := FDQryINSS.FieldByName('minimo').AsCurrency;
    Result.maximo   := FDQryINSS.FieldByName('maximo').AsCurrency;
  finally
    FDQryINSS.Close;
  end;
end;

procedure TINSSDAO.Excluir(data: TDateTime);
begin
  //TODO: Fazer exclusão do INSS
end;

function TINSSDAO.ListarTodosQry(data: String): TFDQuery;
begin
  //TODO: Fazer listagem de todos os INSS
end;

end.
